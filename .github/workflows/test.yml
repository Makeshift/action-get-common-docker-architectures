name: Test action and release if outputs are as expected

on:
  push:
    branches:
      - master
  repository_dispatch:
  workflow_dispatch:

#IMAGES="makeshift27015/bazarr:2b18d5b,makeshift27015/marauder_gcloud_init:2b18d5b,makeshift27015/radarr:2b18d5b,makeshift27015/rclone:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b,makeshift27015/headphones:2b18d5b,makeshift27015/lazylibrarian:2b18d5b,makeshift27015/medusa:2b18d5b,makeshift27015/mylar:2b18d5b,makeshift27015/nzbhydra2:2b18d5b,makeshift27015/sabnzbd:2b18d5b,makeshift27015/transmission:2b18d5b"
#IMAGES="makeshift27015/radarr:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b"

jobs:
  cancel_redundant:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

  input_defaults:
    runs-on: ubuntu-latest
    outputs:
      list: ${{ steps.action-inputs.outputs.data }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Read action.yml
        id: action-inputs
        uses: KJ002/read-yaml@1.6
        with:
          file: action.yml
          key-path: '["inputs"]'
      - name: Debug
        run: echo "${{ steps.action-inputs.outputs.data }}"

  test:
    runs-on: ubuntu-latest
    needs: input_defaults
    strategy:
      fail-fast: false
      matrix:
        test:
          - name: "Test with lots of random architectures and missing images (prune by default)"
            images: "makeshift27015/bazarr:2b18d5b,makeshift27015/marauder_gcloud_init:2b18d5b,makeshift27015/radarr:2b18d5b,makeshift27015/rclone:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b,makeshift27015/headphones:2b18d5b,makeshift27015/lazylibrarian:2b18d5b,makeshift27015/medusa:2b18d5b,makeshift27015/mylar:2b18d5b,makeshift27015/nzbhydra2:2b18d5b,makeshift27015/sabnzbd:2b18d5b,makeshift27015/transmission:2b18d5b"
            expected_output: "linux/amd64" #correct

          - name: "Test with lots of random architectures and missing images minus the single amd64 one (prune by default)"
            images: "makeshift27015/bazarr:2b18d5b,makeshift27015/radarr:2b18d5b,makeshift27015/rclone:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b,makeshift27015/headphones:2b18d5b,makeshift27015/lazylibrarian:2b18d5b,makeshift27015/medusa:2b18d5b,makeshift27015/mylar:2b18d5b,makeshift27015/nzbhydra2:2b18d5b,makeshift27015/sabnzbd:2b18d5b,makeshift27015/transmission:2b18d5b"
            expected_output: "linux/amd64,linux/arm64" #correct

          - name: "Test with lots of random architectures and missing images (prune disabled)"
            images: "makeshift27015/radarr:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b"
            prune_missing_images: "false"
            expected_output: "linux/amd64,linux/arm/v7,linux/arm64" #correct

          - name: "Test with lots of random architectures different default architectures (prune disabled)"
            images: "makeshift27015/radarr:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b"
            prune_missing_images: "false"
            default_architectures: "linux/amd64,linux/arm64"
            expected_output: "linux/amd64,linux/arm/v7,linux/arm64" # correct

          - name: "Test with lots of random architectures different default architectures and missing container (prune disabled)"
            images: "thiscontainer/ismissing:asf,makeshift27015/radarr:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b"
            prune_missing_images: "false"
            default_architectures: "linux/amd64,linux/arm64"
            expected_output: "linux/amd64,linux/arm64" # untested

          - name: "Test with delimiters in input and output"
            images: "alpine:3.16.0 centos:centos7.9.2009"
            input_delimiter: " "
            output_delimiter: " "
            expected_output: "linux/386 linux/amd64 linux/arm/v7 linux/arm64 linux/ppc64le" #correct

          - name: "Test with official images and multi-char delimiters"
            images: "alpine:3.16.0 foo centos:centos7.9.2009 foo debian:stable-20220822-slim"
            input_delimiter: " foo " # this works
            output_delimiter: " bar " # this doesn't
            expected_output: "" # wrong

          - name: "Test with official images and newline delimiter"
            images: >
              alpine:3.16.0
              centos:centos7.9.2009
              debian:stable-20220822-slim
            input_delimiter: "\n" # doesn't work
            output_delimiter: "\n" # unknown
            expected_output: "" # wrong

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: ${{ matrix.test.name }}
        uses: ./ # Uses an action in the root directory
        id: test
        with:
          images: ${{ matrix.test.images }}
          prune_missing_images: ${{ matrix.test.prune_missing_images != '' && matrix.test.prune_missing_images || fromJson(needs.input_defaults.outputs.list).prune_missing_images.default }}
          default_architectures: ${{ matrix.test.default_architectures != '' && matrix.test.default_architectures || fromJson(needs.input_defaults.outputs.list).default_architectures.default }}
          debug: "true"
          input_delimiter: ${{ matrix.test.input_delimiter != '' && matrix.test.input_delimiter || fromJson(needs.input_defaults.outputs.list).input_delimiter.default }}
          output_delimiter: ${{ matrix.test.output_delimiter != '' && matrix.test.output_delimiter || fromJson(needs.input_defaults.outputs.list).output_delimiter.default }}
      - name: Outputs
        run: echo "${{ steps.test.outputs.architectures }}"
