name: Test action and release if outputs are as expected

on:
  push:
    branches:
      - master
  repository_dispatch:
  workflow_dispatch:

#IMAGES="makeshift27015/bazarr:2b18d5b,makeshift27015/marauder_gcloud_init:2b18d5b,makeshift27015/radarr:2b18d5b,makeshift27015/rclone:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b,makeshift27015/headphones:2b18d5b,makeshift27015/lazylibrarian:2b18d5b,makeshift27015/medusa:2b18d5b,makeshift27015/mylar:2b18d5b,makeshift27015/nzbhydra2:2b18d5b,makeshift27015/sabnzbd:2b18d5b,makeshift27015/transmission:2b18d5b"
#IMAGES="makeshift27015/radarr:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b"

jobs:
  cancel_redundant:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

  input_defaults:
    runs-on: ubuntu-latest
    outputs:
      list: ${{ steps.action-inputs.outputs.data }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Read action.yml
        id: action-inputs
        uses: KJ002/read-yaml@1.6
        with:
          file: action.yml
          key-path: '["inputs"]'
      - name: Debug
        run: echo "${{ steps.action-inputs.outputs.data }}"

  test:
    runs-on: ubuntu-latest
    needs: input_defaults
    strategy:
      fail-fast: false
      matrix:
        test:
          - name: "random arch, missing images, prune on"
            images: "makeshift27015/bazarr:2b18d5b,makeshift27015/marauder_gcloud_init:2b18d5b,makeshift27015/radarr:2b18d5b,makeshift27015/rclone:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b,makeshift27015/headphones:2b18d5b,makeshift27015/lazylibrarian:2b18d5b,makeshift27015/medusa:2b18d5b,makeshift27015/mylar:2b18d5b,makeshift27015/nzbhydra2:2b18d5b,makeshift27015/sabnzbd:2b18d5b,makeshift27015/transmission:2b18d5b"
            expected_output: "linux/amd64"

          - name: "random arch, no missing images, minus single arch image, prune on"
            images: "makeshift27015/bazarr:2b18d5b,makeshift27015/radarr:2b18d5b,makeshift27015/rclone:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b,makeshift27015/headphones:2b18d5b,makeshift27015/lazylibrarian:2b18d5b,makeshift27015/medusa:2b18d5b,makeshift27015/mylar:2b18d5b,makeshift27015/nzbhydra2:2b18d5b,makeshift27015/sabnzbd:2b18d5b,makeshift27015/transmission:2b18d5b"
            expected_output: "linux/amd64,linux/arm64"

          - name: "random arch, missing images, prune off"
            images: "makeshift27015/radarr:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b"
            prune_missing_images: "false"
            expected_output: "linux/amd64,linux/arm/v7,linux/arm64"

          - name: "random arch, different default arch, prune off"
            images: "makeshift27015/radarr:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b"
            prune_missing_images: "false"
            default_architectures: "linux/amd64,linux/arm64"
            expected_output: "linux/amd64,linux/arm/v7,linux/arm64"

          - name: "random arch, missing image, different defaults, prune off"
            images: "thiscontainer/ismissing:asf,makeshift27015/radarr:2b18d5b,makeshift27015/marauder_rclone_generate_keys:2b18d5b,makeshift27015/sonarr:2b18d5b,makeshift27015/traktarr:2b18d5b"
            prune_missing_images: "false"
            default_architectures: "linux/amd64,linux/arm64"
            expected_output: "linux/amd64,linux/arm64"

          - name: "one-char delimiters, 2 images"
            images: "alpine:3.16.0 centos:centos7.9.2009"
            input_delimiter: " "
            output_delimiter: " "
            expected_output: "linux/386 linux/amd64 linux/arm/v7 linux/arm64 linux/ppc64le"

          - name: "multi-char delimiters"
            images: "alpine:3.16.0 foo centos:centos7.9.2009 foo debian:stable-20220822-slim"
            input_delimiter: " foo "
            output_delimiter: " bar "
            expected_output: "linux/386 bar linux/amd64 bar linux/arm/v7 bar linux/arm64 bar linux/ppc64le bar linux/s390x"

          - name: "newline delimiter"
            images: |
              alpine:3.16.0
              centos:centos7.9.2009
              debian:stable-20220822-slim
            input_delimiter: "\n"
            output_delimiter: "\n"
            expected_output: |
              linux/386
              linux/amd64
              linux/arm/v7
              linux/arm64
              linux/ppc64le

          - name: "newline delimiter multi-char"
            images: |
              alpine:3.16.0 foo
              centos:centos7.9.2009 foo
              debian:stable-20220822-slim foo
            input_delimiter: " foo\n"
            output_delimiter: " bar\n"
            expected_output: |
              linux/386 bar
              linux/amd64 bar
              linux/arm/v7 bar
              linux/arm64 bar
              linux/ppc64le bar
              linux/s390x

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: ${{ matrix.test.name }}
        uses: ./ # Uses an action in the root directory
        id: test
        with:
          images: ${{ matrix.test.images }}
          prune_missing_images: ${{ matrix.test.prune_missing_images != '' && matrix.test.prune_missing_images || fromJson(needs.input_defaults.outputs.list).prune_missing_images.default }}
          default_architectures: ${{ matrix.test.default_architectures != '' && matrix.test.default_architectures || fromJson(needs.input_defaults.outputs.list).default_architectures.default }}
          debug: "true"
          input_delimiter: ${{ matrix.test.input_delimiter != '' && matrix.test.input_delimiter || fromJson(needs.input_defaults.outputs.list).input_delimiter.default }}
          output_delimiter: ${{ matrix.test.output_delimiter != '' && matrix.test.output_delimiter || fromJson(needs.input_defaults.outputs.list).output_delimiter.default }}
      - name: Outputs
        run: |
          actual_output="${{ steps.test.outputs.architectures }}"
          actual_output="${actual_output#"${actual_output%%[![:space:]]*}"}"
          actual_output="${actual_output%"${actual_output##*[![:space:]]}"}"
          expected_output="${{ matrix.test.expected_output }}"
          expected_output="${expected_output#"${expected_output%%[![:space:]]*}"}"
          expected_output="${expected_output%"${expected_output##*[![:space:]]}"}"
          echo "**** Actual output ****"
          echo "$actual_output"
          echo "**** Expected output ****"
          echo "$expected_output"
          echo "**** Diff ****"
          diff -u <(echo "$actual_output") <(echo "$expected_output")

  release:
    needs: test
    if: success() && github.ref_name == 'master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update Readme
        uses: npalm/action-docs-action@v4
        with:
          readme: Readme.md
      - uses: stefanzweifel/git-auto-commit-action@v4
        id: auto-commit-action
        with:
          commit_message: "[no ci] Update Readme (via action)"
      - name: Checkout if new commit created
        if: steps.auto-commit-action.outputs.changes_detected == 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.auto-commit-action.outputs.commit_hash }}

      #- name: Create release
